Решаемой задачей было достать данные из нескольких систем и отобразить их на фронте, 
для чего требуется отправляемый с UI фильтр, преобразовывать в фильтр для систем, 
а затем полученные из систем данные преобразовывать в сущности для фронта. Код под NDA, здесь мой отчет по нему. 

Анализ по коду.
Loc указаны с учетом пустых строк, комментариев и импортов
До материала из Сильных Идей.
Покрыл тестами 189 lос 
Размер тестов 192 lос
За 6 часов. 

После Сильных Идей.
Покрыл тестами 
~40 loc
Размер тестов
~40 loc

I. Рефлексия по первой части задания: 
В виду того что код мало был разделен на блоки много времени ушло на рефакторинг. 
В целом, идея кода выглядит весьма понятной, а вот в тестах я и сам путался, 
т.к. они были очень рядом друг с другом, так же путал с методами для генерации значения для фильтра.

II. Перед изучением материала Сильных Идей у меня уже было представление о том, 
какие тесты я должен написать и как примерно будет выглядеть метод.
Поэтому, после того как познакомился с материалами из Сильных Идей, 
мои тесты и код не изменились. Изменилось только то как в целом посмотрел на задачу, 
как когда-то, когда я не знал как со стороны программирования выглядят подобные системы, 
и представлял что на экране я вижу непосредственно сами бизнес объекты, с которыми была совершены действия(3 уровень), 
а не список сущностей для фронта, в которые вставлена информация из других сервисов, 
предоставляющих историю действий над этими объектами(2 уровень).

Так как изначально делал тесты по методике из крайнего занятия по 1.8, 
то от внутренней реализации я не зависел, и мокать и прокидывать что-то мне не требовалось. 
Сигнатуры методов тоже были определены заранее. Для меньшего совпадения возможных дизайнов, 
я сделал более выразительные имена и в принципе применил рефакторинг, что бы организовать удобное тестирование. 
При сравнении опирался на конкретные гетеры, через которые потом получаю значения для сравнения с ожидаемыми. 
Но это относится к интерфейсу, а не реализации, так что не критично. 
